/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

import { ServiceClient, ServiceClientOptions, ServiceCallback, HttpOperationResponse } from 'ms-rest';
import * as models from "./models";

export default class PredictionAPIClient extends ServiceClient {
  /**
   * @class
   * Initializes a new instance of the PredictionAPIClient class.
   * @constructor
   *
   * @param {string} apiKey -
   *
   * @param {string} endpoint - Supported Cognitive Services endpoints
   *
   * @param {object} [options] - The parameter options
   *
   * @param {Array} [options.filters] - Filters to be added to the request pipeline
   *
   * @param {object} [options.requestOptions] - Options for the underlying request object
   * {@link https://github.com/request/request#requestoptions-callback Options doc}
   *
   * @param {boolean} [options.noRetryPolicy] - If set to true, turn off default retry policy
   *
   */
  constructor(apiKey: string, endpoint: string, options?: ServiceClientOptions);

  apiKey: string;

  endpoint: string;


  /**
   * @summary Predict an image url and saves the result
   *
   * @param {uuid} projectId The project id
   *
   * @param {object} imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the
   * url of the image to be evaluated
   *
   * @param {string} [imageUrl.url]
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {uuid} [options.iterationId] Optional. Specifies the id of a
   * particular iteration to evaluate against.
   * The default iteration for the project will be used when not specified
   *
   * @param {string} [options.application] Optional. Specifies the name of
   * application using the endpoint
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ImagePrediction>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  predictImageUrlWithHttpOperationResponse(projectId: string, imageUrl: models.ImageUrl, options?: { iterationId? : string, application? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImagePrediction>>;

  /**
   * @summary Predict an image url and saves the result
   *
   * @param {uuid} projectId The project id
   *
   * @param {object} imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the
   * url of the image to be evaluated
   *
   * @param {string} [imageUrl.url]
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {uuid} [options.iterationId] Optional. Specifies the id of a
   * particular iteration to evaluate against.
   * The default iteration for the project will be used when not specified
   *
   * @param {string} [options.application] Optional. Specifies the name of
   * application using the endpoint
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ImagePrediction} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ImagePrediction} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ImagePrediction} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  predictImageUrl(projectId: string, imageUrl: models.ImageUrl, options?: { iterationId? : string, application? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ImagePrediction>;
  predictImageUrl(projectId: string, imageUrl: models.ImageUrl, callback: ServiceCallback<models.ImagePrediction>): void;
  predictImageUrl(projectId: string, imageUrl: models.ImageUrl, options: { iterationId? : string, application? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImagePrediction>): void;


  /**
   * @summary Predict an image and saves the result
   *
   * @param {uuid} projectId The project id
   *
   * @param {object} imageData
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {uuid} [options.iterationId] Optional. Specifies the id of a
   * particular iteration to evaluate against.
   * The default iteration for the project will be used when not specified
   *
   * @param {string} [options.application] Optional. Specifies the name of
   * application using the endpoint
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ImagePrediction>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  predictImageWithHttpOperationResponse(projectId: string, imageData: stream.Readable, options?: { iterationId? : string, application? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImagePrediction>>;

  /**
   * @summary Predict an image and saves the result
   *
   * @param {uuid} projectId The project id
   *
   * @param {object} imageData
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {uuid} [options.iterationId] Optional. Specifies the id of a
   * particular iteration to evaluate against.
   * The default iteration for the project will be used when not specified
   *
   * @param {string} [options.application] Optional. Specifies the name of
   * application using the endpoint
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ImagePrediction} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ImagePrediction} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ImagePrediction} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  predictImage(projectId: string, imageData: stream.Readable, options?: { iterationId? : string, application? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ImagePrediction>;
  predictImage(projectId: string, imageData: stream.Readable, callback: ServiceCallback<models.ImagePrediction>): void;
  predictImage(projectId: string, imageData: stream.Readable, options: { iterationId? : string, application? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImagePrediction>): void;


  /**
   * @summary Predict an image url without saving the result
   *
   * @param {uuid} projectId The project id
   *
   * @param {object} imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the
   * url of the image to be evaluated
   *
   * @param {string} [imageUrl.url]
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {uuid} [options.iterationId] Optional. Specifies the id of a
   * particular iteration to evaluate against.
   * The default iteration for the project will be used when not specified
   *
   * @param {string} [options.application] Optional. Specifies the name of
   * application using the endpoint
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ImagePrediction>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  predictImageUrlWithNoStoreWithHttpOperationResponse(projectId: string, imageUrl: models.ImageUrl, options?: { iterationId? : string, application? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImagePrediction>>;

  /**
   * @summary Predict an image url without saving the result
   *
   * @param {uuid} projectId The project id
   *
   * @param {object} imageUrl An {Iris.Web.Api.Models.ImageUrl} that contains the
   * url of the image to be evaluated
   *
   * @param {string} [imageUrl.url]
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {uuid} [options.iterationId] Optional. Specifies the id of a
   * particular iteration to evaluate against.
   * The default iteration for the project will be used when not specified
   *
   * @param {string} [options.application] Optional. Specifies the name of
   * application using the endpoint
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ImagePrediction} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ImagePrediction} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ImagePrediction} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  predictImageUrlWithNoStore(projectId: string, imageUrl: models.ImageUrl, options?: { iterationId? : string, application? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ImagePrediction>;
  predictImageUrlWithNoStore(projectId: string, imageUrl: models.ImageUrl, callback: ServiceCallback<models.ImagePrediction>): void;
  predictImageUrlWithNoStore(projectId: string, imageUrl: models.ImageUrl, options: { iterationId? : string, application? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImagePrediction>): void;


  /**
   * @summary Predict an image without saving the result
   *
   * @param {uuid} projectId The project id
   *
   * @param {object} imageData
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {uuid} [options.iterationId] Optional. Specifies the id of a
   * particular iteration to evaluate against.
   * The default iteration for the project will be used when not specified
   *
   * @param {string} [options.application] Optional. Specifies the name of
   * application using the endpoint
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @returns {Promise} A promise is returned
   *
   * @resolve {HttpOperationResponse<ImagePrediction>} - The deserialized result object.
   *
   * @reject {Error|ServiceError} - The error object.
   */
  predictImageWithNoStoreWithHttpOperationResponse(projectId: string, imageData: stream.Readable, options?: { iterationId? : string, application? : string, customHeaders? : { [headerName: string]: string; } }): Promise<HttpOperationResponse<models.ImagePrediction>>;

  /**
   * @summary Predict an image without saving the result
   *
   * @param {uuid} projectId The project id
   *
   * @param {object} imageData
   *
   * @param {object} [options] Optional Parameters.
   *
   * @param {uuid} [options.iterationId] Optional. Specifies the id of a
   * particular iteration to evaluate against.
   * The default iteration for the project will be used when not specified
   *
   * @param {string} [options.application] Optional. Specifies the name of
   * application using the endpoint
   *
   * @param {object} [options.customHeaders] Headers that will be added to the
   * request
   *
   * @param {ServiceCallback} [optionalCallback] - The optional callback.
   *
   * @returns {ServiceCallback|Promise} If a callback was passed as the last
   * parameter then it returns the callback else returns a Promise.
   *
   * {Promise} A promise is returned.
   *
   *                      @resolve {ImagePrediction} - The deserialized result object.
   *
   *                      @reject {Error|ServiceError} - The error object.
   *
   * {ServiceCallback} optionalCallback(err, result, request, response)
   *
   *                      {Error|ServiceError}  err        - The Error object if an error occurred, null otherwise.
   *
   *                      {ImagePrediction} [result]   - The deserialized result object if an error did not occur.
   *                      See {@link ImagePrediction} for more information.
   *
   *                      {WebResource} [request]  - The HTTP Request object if an error did not occur.
   *
   *                      {http.IncomingMessage} [response] - The HTTP Response stream if an error did not occur.
   */
  predictImageWithNoStore(projectId: string, imageData: stream.Readable, options?: { iterationId? : string, application? : string, customHeaders? : { [headerName: string]: string; } }): Promise<models.ImagePrediction>;
  predictImageWithNoStore(projectId: string, imageData: stream.Readable, callback: ServiceCallback<models.ImagePrediction>): void;
  predictImageWithNoStore(projectId: string, imageData: stream.Readable, options: { iterationId? : string, application? : string, customHeaders? : { [headerName: string]: string; } }, callback: ServiceCallback<models.ImagePrediction>): void;
}

export { PredictionAPIClient, models as PredictionAPIModels };
