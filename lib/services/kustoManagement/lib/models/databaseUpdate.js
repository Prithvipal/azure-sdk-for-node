/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */

'use strict';

const models = require('./index');

/**
 * Class representing an update to a Kusto database.
 *
 * @extends models['Resource']
 */
class DatabaseUpdate extends models['Resource'] {
  /**
   * Create a DatabaseUpdate.
   * @property {string} [location] Resource location.
   * @property {string} [etag] An ETag of the resource updated.
   * @property {string} [provisioningState] The provisioned state of the
   * resource. Possible values include: 'Running', 'Creating', 'Deleting',
   * 'Succeeded', 'Failed'
   * @property {number} softDeletePeriodInDays The number of days data should
   * be kept before it stops being accessible to queries.
   * @property {number} [hotCachePeriodInDays] The number of days of data that
   * should be kept in cache for fast queries.
   * @property {object} [statistics] The statistics of the database.
   * @property {number} [statistics.size] The database size - the total size of
   * compressed data and index in bytes.
   */
  constructor() {
    super();
  }

  /**
   * Defines the metadata of DatabaseUpdate
   *
   * @returns {object} metadata of DatabaseUpdate
   *
   */
  mapper() {
    return {
      required: false,
      serializedName: 'DatabaseUpdate',
      type: {
        name: 'Composite',
        className: 'DatabaseUpdate',
        modelProperties: {
          id: {
            required: false,
            readOnly: true,
            serializedName: 'id',
            type: {
              name: 'String'
            }
          },
          name: {
            required: false,
            readOnly: true,
            serializedName: 'name',
            type: {
              name: 'String'
            }
          },
          type: {
            required: false,
            readOnly: true,
            serializedName: 'type',
            type: {
              name: 'String'
            }
          },
          location: {
            required: false,
            serializedName: 'location',
            type: {
              name: 'String'
            }
          },
          etag: {
            required: false,
            readOnly: true,
            serializedName: 'etag',
            type: {
              name: 'String'
            }
          },
          provisioningState: {
            required: false,
            readOnly: true,
            serializedName: 'properties.provisioningState',
            type: {
              name: 'String'
            }
          },
          softDeletePeriodInDays: {
            required: true,
            serializedName: 'properties.softDeletePeriodInDays',
            type: {
              name: 'Number'
            }
          },
          hotCachePeriodInDays: {
            required: false,
            serializedName: 'properties.hotCachePeriodInDays',
            type: {
              name: 'Number'
            }
          },
          statistics: {
            required: false,
            serializedName: 'properties.statistics',
            type: {
              name: 'Composite',
              className: 'DatabaseStatistics'
            }
          }
        }
      }
    };
  }
}

module.exports = DatabaseUpdate;
